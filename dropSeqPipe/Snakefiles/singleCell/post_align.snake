"""Generate all the post alignement steps."""


# Configfile
configfile: 'config.yaml'

# Executables
TMPDIR = config['TMPDIR']
PICARD = config['PICARD']
DROPSEQ = config['DROPSEQ']

# References files
GENOMEREF = config['GENOMEREF']
REFFLAT = config['REFFLAT']
RRNAINTERVALS = config['RRNAINTERVALS']

# Species
SPECIES = config["SPECIES"]


rule all:
	input:
		expand('logs/{sample}_hist_out_cell.txt', sample=config['Samples']),
		expand('plots/{sample}_rna_metrics.pdf', sample=config['Samples'])

# rule sort:
# 	input:
# 		samples = temp('{sample}.Aligned.sam')
# 	output: temp('{sample}_Aligned_sorted.sam')
# 	threads:1
# 	shell:
# 		"""java	-Djava.io.tmpdir={TMPDIR} -Dsamjdk.buffer_size=131072 -XX:GCTimeLimit=50 -XX:GCHeapFreeLimit=10 -Xmx4000m -jar {PICARD} SortSam\
# 		INPUT={input}\
# 		OUTPUT={output}\
# 		SORT_ORDER=queryname\
# 		TMP_DIR={TMPDIR}"""

rule stage3:
	input:	unmapped = '{sample}_tagged_unmapped_trimmed.bam',
			mapped = '{sample}.Aligned_sorted.bam'
	output: temp('{sample}_gene_exon_tagged.bam')
	threads: 2
	shell:
		"""java -Djava.io.tmpdir={TMPDIR} -Xmx4000m -jar {PICARD} MergeBamAlignment\
		REFERENCE_SEQUENCE={GENOMEREF}\
		UNMAPPED_BAM={input.unmapped}\
		ALIGNED_BAM={input.mapped}\
		INCLUDE_SECONDARY_ALIGNMENTS=false\
		PAIRED_RUN=false\
		OUTPUT=/dev/stdout COMPRESSION_LEVEL=0|\

		{DROPSEQ}/TagReadWithGeneExon\
		OUTPUT={output}\
		INPUT=/dev/stdin\
		ANNOTATIONS_FILE={REFFLAT}\
		TAG=GE\
		CREATE_INDEX=true
		"""

rule bead_errors_metrics:
	input: '{sample}_gene_exon_tagged.bam'
	output:
		bam = '{sample}_final.bam',
		metrics = 'logs/{sample}_rna_metrics.txt'
	params:
		out_stats = 'logs/{sample}_synthesis_stats.txt',
		summary = 'logs/{sample}_synthesis_stats_summary.txt',
		barcodes = lambda wildcards: config['Samples'][wildcards.sample]['expected_cells'] * 2,
		cells = lambda wildcards: config['Samples'][wildcards.sample]['expected_cells']
	shell:
		"""{DROPSEQ}/DetectBeadSynthesisErrors\
		INPUT={input}\
		OUTPUT={output.bam}\
		OUTPUT_STATS={params.out_stats}\
		SUMMARY={params.summary}\
		NUM_BARCODES={params.barcodes}\
		PRIMER_SEQUENCE=AAGCAGTGGTATCAACGCAGAGTAC;
		{DROPSEQ}/SingleCellRnaSeqMetricsCollector\
		INPUT={input}\
		OUTPUT={output.metrics}\
		ANNOTATIONS_FILE={REFFLAT}\
		NUM_CORE_BARCODES={params.cells}\
		RIBOSOMAL_INTERVALS={RRNAINTERVALS}
		"""

rule bam_hist:
	input: '{sample}_final.bam'
	output: 'logs/{sample}_hist_out_cell.txt'
	shell:
		"""{DROPSEQ}/BAMTagHistogram\
		I={input}\
		O={output}\
		TAG=XC
		"""

rule plot_rna_metrics:
	input: 'logs/{sample}_rna_metrics.txt'
	output: 'plots/{sample}_rna_metrics.pdf'
	params: 
		cells = lambda wildcards: config['Samples'][wildcards.sample]['expected_cells']
	script:
		'../../Rscripts/singleCell/plot_rna_metrics.R'

